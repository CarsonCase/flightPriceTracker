// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: Routes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRoute = `-- name: CreateRoute :one
INSERT INTO Routes(id, departure, arrival)
VALUES($1, $2, $3)
RETURNING id, departure, arrival
`

type CreateRouteParams struct {
	ID        uuid.UUID
	Departure string
	Arrival   string
}

func (q *Queries) CreateRoute(ctx context.Context, arg CreateRouteParams) (Route, error) {
	row := q.db.QueryRowContext(ctx, createRoute, arg.ID, arg.Departure, arg.Arrival)
	var i Route
	err := row.Scan(&i.ID, &i.Departure, &i.Arrival)
	return i, err
}

const getRoutes = `-- name: GetRoutes :many
SELECT id, departure, arrival FROM Routes
`

func (q *Queries) GetRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, getRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(&i.ID, &i.Departure, &i.Arrival); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
