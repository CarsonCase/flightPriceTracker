// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: Flights.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFlight = `-- name: CreateFlight :one
INSERT INTO Flights(ID, created_at, updated_at, route, date, price)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, price, date, route
`

type CreateFlightParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Route     uuid.UUID
	Date      string
	Price     float64
}

func (q *Queries) CreateFlight(ctx context.Context, arg CreateFlightParams) (Flight, error) {
	row := q.db.QueryRowContext(ctx, createFlight,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Route,
		arg.Date,
		arg.Price,
	)
	var i Flight
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Price,
		&i.Date,
		&i.Route,
	)
	return i, err
}

const getFlights = `-- name: GetFlights :many
SELECT id, created_at, updated_at, price, date, route FROM Flights ORDER BY created_at DESC
`

func (q *Queries) GetFlights(ctx context.Context) ([]Flight, error) {
	rows, err := q.db.QueryContext(ctx, getFlights)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flight
	for rows.Next() {
		var i Flight
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Price,
			&i.Date,
			&i.Route,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
